# This is a basic workflow to help you get started with Actions

name: AKS Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch: 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2.1.0
        with:
          # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x
          dotnet-version: 3.1.x
      - name: dotnet build
        run: dotnet build -c release
        
      - name: docker build
        run: docker build -t githubactions-aks-demo:'${{github.sha}}' .
        
      - name: Docker login
        run: docker login --username '${{secrets.DOCKER_HUB_USERNAME}}' --password '${{secrets.DOCKER_HUB_ACCESS_TOKEN}}'
        
      - name: docker image tag
        run: docker tag githubactions-aks-demo:'${{github.sha}}' '${{secrets.DOCKER_HUB_USERNAME}}'/githubactions-aks-demo:'${{github.sha}}'
        
      - name: docker push
        run: docker push '${{secrets.DOCKER_HUB_USERNAME}}'/githubactions-aks-demo:'${{github.sha}}'
        
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v3
        with:
          # Resource Group Name
          resource-group: aks1000
          # AKS Cluster Name
          cluster-name: githubactions-aks-demo-cluster
          # AKS Cluster Subscription
          subscription: '${{secrets.AZURE_CREDENTIALS}}'
          
      - name: Create secret in Kubernetes cluster
        uses: Azure/k8s-create-secret@v3.0
        with:
          # Type of Kubernetes secret. Defaults to 'kubernetes.io/dockerconfigjson'.
          secret-type: docker-registry
          # Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.
          secret-name: docker-image-pull-secret
          # Container Registry URL
          container-registry-url: https://hub.docker.com/
          # Container Registry user name
          container-registry-username: '${{secrets.DOCKER_HUB_USERNAME}}'
          # Container Registry password
          container-registry-password: '${{secrets.DOCKER_HUB_ACCESS_TOKEN}}'
         
      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v4
        with:
          # Path to the manifest files which will be used for deployment.
          manifests: 
            k8/Deployment.yml
            k8/service.yml
          # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
          images: '${{secrets.DOCKER_HUB_USERNAME}}/githubactions-aks-demo:${{github.sha}}'
          # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
          imagepullsecrets: docker-image-pull-secret
          # deploy, promote, or reject
          action: deploy
        
